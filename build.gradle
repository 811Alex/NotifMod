plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
}

def javaVer = project.java_version.toInteger()
def modName = project.archives_base_name

version = project.mod_version
group = project.maven_group

repositories {
    maven { url 'https://maven.shedaniel.me/' }
    maven { url 'https://maven.terraformersmc.com/' }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_fabric}") {
        exclude(group: 'net.fabricmc.fabric-api')
    }
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_fabric}"
    implementation "jakarta.annotation:jakarta.annotation-api:2.1.0"
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand 'version': project.version, 'javaVer': javaVer
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = javaVer
}

base { archivesName = modName }

java {
    withSourcesJar()
    toolchain { languageVersion = JavaLanguageVersion.of(javaVer) }
}

loom {
    runs { remove server }
}

configurations { runtimeClasspath.extendsFrom loomDevelopmentDependencies }

jar {
    from("LICENSE") {
        rename {"${it}_${modName}"}
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = modName
            from components.java
        }
    }
}
